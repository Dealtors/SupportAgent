import PyPDF2
import pdfplumber
import pytesseract
from typing import Dict
from pathlib import Path
from typing import List, Optional

try:
    from pdf2image import convert_from_path
except ImportError:
    print("‚ö†Ô∏è  pdf2image –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pdf2image")

class DocumentParser:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PDF –∏ OCR"""
    
    def __init__(self, tesseract_path: Optional[str] = None):
        """
        Args:
            tesseract_path: –ü—É—Ç—å –∫ tesseract.exe (–¥–ª—è Windows)
        """
        if tesseract_path:
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
        
        self.supported_extensions = {'.pdf', '.txt'}
    
    def parse_document(self, file_path: str, use_ocr: bool = True) -> List[Dict[str, any]]:
        """–ü–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        file_path = Path(file_path)
        
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        if file_path.suffix.lower() == '.pdf':
            return self._parse_pdf(file_path, use_ocr)
        elif file_path.suffix.lower() == '.txt':
            return self._parse_txt(file_path)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_path.suffix}")
    
    def _parse_pdf(self, pdf_path: Path, use_ocr: bool = True) -> List[Dict[str, any]]:
        """–ü–∞—Ä—Å–∏—Ç PDF —Ñ–∞–π–ª"""
        pages_data = []
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        direct_text = self._extract_text_directly(pdf_path)
        
        if direct_text and any(len(page['text'].strip()) > 50 for page in direct_text):
            print("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PDF")
            return direct_text
        
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pdfplumber
        pdfplumber_text = self._extract_with_pdfplumber(pdf_path)
        if pdfplumber_text and any(len(page['text'].strip()) > 50 for page in pdfplumber_text):
            print("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —Å –ø–æ–º–æ—â—å—é pdfplumber")
            return pdfplumber_text
        
        # –ü–æ–ø—ã—Ç–∫–∞ 3: OCR –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        if use_ocr:
            print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR...")
            ocr_text = self._extract_with_ocr(pdf_path)
            if ocr_text:
                print("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —Å –ø–æ–º–æ—â—å—é OCR")
                return ocr_text
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF")
        return pages_data
    
    def _extract_text_directly(self, pdf_path: Path) -> List[Dict[str, any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –ø–æ–º–æ—â—å—é PyPDF2"""
        pages_data = []
        
        try:
            with open(pdf_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    text = page.extract_text()
                    
                    pages_data.append({
                        'page_number': page_num + 1,
                        'text': text,
                        'method': 'direct_extraction',
                        'char_count': len(text)
                    })
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        
        return pages_data
    
    def _extract_with_pdfplumber(self, pdf_path: Path) -> List[Dict[str, any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é pdfplumber"""
        pages_data = []
        
        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page_num, page in enumerate(pdf.pages):
                    text = page.extract_text() or ""
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—ã
                    if len(text.strip()) < 100:
                        tables = page.extract_tables()
                        table_text = self._process_tables(tables)
                        text += "\n" + table_text
                    
                    pages_data.append({
                        'page_number': page_num + 1,
                        'text': text,
                        'method': 'pdfplumber',
                        'char_count': len(text)
                    })
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ pdfplumber: {e}")
        
        return pages_data
    
    def _extract_with_ocr(self, pdf_path: Path) -> List[Dict[str, any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR"""
        pages_data = []
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = convert_from_path(pdf_path, dpi=300)
            
            for page_num, image in enumerate(images):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º tesseract –¥–ª—è OCR
                text = pytesseract.image_to_string(image, lang='rus+eng')
                
                pages_data.append({
                    'page_number': page_num + 1,
                    'text': text,
                    'method': 'ocr',
                    'char_count': len(text)
                })
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR: {e}")
        
        return pages_data
    
    def _parse_txt(self, txt_path: Path) -> List[Dict[str, any]]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        try:
            with open(txt_path, 'r', encoding='utf-8') as file:
                text = file.read()
            
            return [{
                'page_number': 1,
                'text': text,
                'method': 'direct',
                'char_count': len(text)
            }]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è txt —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def _process_tables(self, tables: List) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç"""
        table_text = ""
        
        for table in tables:
            if table:
                for row in table:
                    row_text = " | ".join(str(cell) if cell is not None else "" for cell in row)
                    table_text += row_text + "\n"
                table_text += "\n"
        
        return table_text
    
    def batch_parse(self, folder_path: str, use_ocr: bool = True) -> Dict[str, List[Dict]]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ"""
        folder = Path(folder_path)
        results = {}
        
        for file_path in folder.iterdir():
            if file_path.suffix.lower() in self.supported_extensions:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_path.name}")
                try:
                    results[file_path.name] = self.parse_document(file_path, use_ocr)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
                    results[file_path.name] = []
        
        return results

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    parser = DocumentParser()
    
    # –ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
    try:
        result = parser.parse_document("example.pdf", use_ocr=True)
        for page in result:
            print(f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page['page_number']} ({page['method']}):")
            print(f"–¢–µ–∫—Å—Ç: {page['text'][:200]}...")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ
    # results = parser.batch_parse("./documents", use_ocr=True)
    