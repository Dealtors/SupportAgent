const textarea = document.querySelector('.textarea');
const sendBtn  = document.querySelector('.send-btn');
const thread   = document.querySelector('.thread');

// –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ —É–µ–∑–∂–∞–ª–æ –ø–æ–¥ –∫–æ–º–ø–æ–∑–µ—Ä
function ensureScrollable() {
  if (!thread.style.maxHeight) {
    thread.style.maxHeight = 'calc(100vh - 210px)';
    thread.style.overflowY = 'auto';
  }
}
function scrollBottom() {
  ensureScrollable();
  thread.scrollTop = thread.scrollHeight;
}

function escapeHTML(s='') {
  return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
}
function probClass(p) {
  if (p >= 0.8) return '';       // –∑–µ–ª—ë–Ω–∞—è
  if (p >= 0.5) return ' mid';   // –∂—ë–ª—Ç–∞—è
  return ' low';                 // —Ä–æ–∑–æ–≤–∞—è
}

function renderUser(text) {
  const html = `
  <article class="msg user">
    <div class="msg-avatar">üßë</div>
    <div class="msg-bubble">
      <div class="msg-card"><p>${escapeHTML(text)}</p></div>
    </div>
  </article>`;
  thread.insertAdjacentHTML('beforeend', html);
  scrollBottom();
}

function renderBot({ id, answer, confidence }) {
  const prob = typeof confidence === 'number' ? Math.round(confidence * 100) : null;
  const pill = prob != null
    ? `<button class="prob mono${probClass(confidence)}" data-toggle="meta" type="button">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${prob}%</button>`
    : '';
  const html = `
  <article class="msg bot" data-id="${id || ''}">
    <div class="msg-avatar">ü§ñ</div>
    <div class="msg-bubble">
      <div class="msg-card">
        ${pill}
        <div class="msg-text"><p>${escapeHTML(answer || '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω')}</p></div>
        <div class="msg-meta" hidden>
          <div class="small">ID: ${id || '‚Äî'}</div>
        </div>
        <div class="msg-actions">
          <button class="icon-btn action-reply"  title="–û—Ç–≤–µ—Ç–∏—Ç—å">üí¨</button>
          <button class="icon-btn action-email"  title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É">‚úâÔ∏è</button>
          <button class="icon-btn action-copy"   title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">üìã</button>
          <button class="icon-btn action-report" title="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç">üìÑ</button>
          <button class="thumb-btn up action-like"   title="–ü–æ–ª–µ–∑–Ω–æ">üëç</button>
          <button class="thumb-btn down action-dislike" title="–ù–µ–ø–æ–ª–µ–∑–Ω–æ">üëé</button>
        </div>
      </div>
    </div>
  </article>`;
  thread.insertAdjacentHTML('beforeend', html);
  wireActions(thread.lastElementChild);
  scrollBottom();
}

function mailto(subject, body) {
  const s = encodeURIComponent(subject || '');
  const b = encodeURIComponent(body || '');
  window.location.href = `mailto:?subject=${s}&body=${b}`;
}

function download(name, text) {
  const blob = new Blob([text], {type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = name;
  document.body.appendChild(a); a.click();
  setTimeout(()=>{ URL.revokeObjectURL(url); a.remove(); }, 0);
}

async function sendFeedback(kind) {
  try {
    await fetch('/feedback', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({ ticket_id: 'ui', feedback: kind })
    });
  } catch {}
}

function wireActions(root) {
  const text = root.querySelector('.msg-text')?.innerText || '';
  const id   = root.dataset.id || 'ui';

  root.querySelector('.action-reply')?.addEventListener('click', () => {
    textarea.focus();
  });

  root.querySelector('.action-email')?.addEventListener('click', () => {
    mailto('–û—Ç–≤–µ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏', text);
  });

  root.querySelector('.action-copy')?.addEventListener('click', async () => {
    try {
      await navigator.clipboard.writeText(text);
      root.querySelector('.action-copy').textContent = '‚úÖ';
      setTimeout(()=> root.querySelector('.action-copy').textContent = 'üìã', 1200);
    } catch {}
  });

  root.querySelector('.action-report')?.addEventListener('click', () => {
    const payload = {
      id, created_at: new Date().toISOString(),
      answer: text
    };
    download(`report-${id}.json`, JSON.stringify(payload, null, 2));
  });

  root.querySelector('.action-like')?.addEventListener('click', () => {
    root.querySelector('.action-like').classList.add('active');
    root.querySelector('.action-dislike')?.classList.remove('active');
    sendFeedback('–ø–æ–ª–µ–∑–Ω–æ');
  });

  root.querySelector('.action-dislike')?.addEventListener('click', () => {
    root.querySelector('.action-dislike').classList.add('active');
    root.querySelector('.action-like')?.classList.remove('active');
    sendFeedback('–Ω–µ–ø–æ–ª–µ–∑–Ω–æ');
  });

  root.querySelector('[data-toggle="meta"]')?.addEventListener('click', () => {
    const meta = root.querySelector('.msg-meta');
    if (meta) meta.hidden = !meta.hidden;
  });
}

async function sendMessage() {
  const text = textarea.value.trim();
  if (!text) return;

  renderUser(text);
  textarea.value = ''; // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞

  try {
    const res = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text })
    });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();

    // –∏–∑ –±—ç–∫–∞: answer, classification.confidence
    const confidence = data?.classification?.confidence ?? null;
    renderBot({ id: data?.message?.id || data?.ticket_id || null, answer: data.answer, confidence });
  } catch (e) {
    renderBot({ answer: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.' });
  }
}

if (sendBtn && textarea) {
  sendBtn.addEventListener('click', sendMessage);
  textarea.addEventListener('keydown', e => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') sendMessage();
  });
}

// –ß–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ HTML –∫—Ç–æ-—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —É–¥–∞–ª–∏–º
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.thread .msg').forEach(n => n.remove());
});
